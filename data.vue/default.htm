<html>

<head>

    <link rel="stylesheet" type="text/css" href="style.css">


    <script src="vue.js">
    </script>

</head>




<body onload="OnLoad()">
    <div id="app">
        <app-head v-bind:config="config"></app-head>
        <hr>
        <app-nav v-bind:pages="pages" v-on:clicked="tabSelected"></app-nav>
        <hr>
        <app-content-home v-if="isTabSelected('Home')" v-bind:state="state" v-bind:config="config"></app-content-home>
        <app-content-config v-if="isTabSelected('Devices')" v-bind:state="state" v-bind:devices="devices"></app-content-config>
        <app-content-admin v-if="isTabSelected('Admin')" v-bind:config="config" v-bind:peers="peers"></app-content-admin>
        <app-content-logging v-if="isTabSelected('Logging')" v-bind:logging="logging"></app-content-logging>
        <!-- <app-view>
            <app-sidebar></app-sidebar>
            <app-content></app-content>
        </app-view> -->
    </div>

    <script>
        //let base = "http://192.168.51.110"
        let base = "http://192.168.51.144"




        // navbar
        Vue.component('app-nav', {
            props: ['pages'],
            template: '<ul class="main">\
                            <li v-bind:class="{ activeTab: pages.activePage==page.name}"  v-for="page in pages.pages" v-on:click="clicked(page.name)" >{{ page.name }}</li>\
                        </ul>',
            methods: {
                clicked: function(pagename) {
                    this.$emit('clicked', pagename)
                }
            }
        })

        // define the header
        Vue.component('app-head', {
            props: ["config"],
            template: '<div class="heading">\
                            <div class="vertverticalContainer"></div>\
                                <div class="horizontalContainer">\
                                    <div >{{ config.name }}</div>\
                                    <div v-for="ver in config.version.split(\'|\')">{{ ver }}</div>\
                                </div>\
                        </div>'

        })

        Vue.component('switch-state', {
            props: ["state"],
            template: '<div><div class="horizontalContainer"><div>{{ state.name }} </div>\
            <button v-on:click="switchPressed(state.switch, state.state?\'off\':\'on\')">\
                <span v-if="state.state==0">Turn ON</span>\
                <span v-else>Turn OFF</span>\
            </button>\
            </div><br></div>',
            methods: {

                switchPressed: function(id, newstate) {
                    let url = base + '/button?port=' + id + '&action=' + newstate
                    postSettingReturnPromise({}, url).then(function(response) {
                        refreshData(false)
                    })
                }
            }
        })


        Vue.component('sensor-state', {
            props: ["item", "itemState"],
            template: '<div><div class="horizontalContainer">\
                            <div>{{ item.name }}</div>\
                            <div class="verticalContainer">\
                                    <div v-for="element in item.elements">{{ element.type }}: {{ itemState[element.type] }} {{ element.uom }}</div>\
                            </div>\
                        </div><br></div>'
        })

        Vue.component('app-content-home', {
            props: ["state", "config"],
            template: '<div id="home">\
                            <fieldset v-if="state.switchCount"><legend>Switches</legend>\
                                <div class="verticalContainer">\
                                    <switch-state v-for="state in state.switchState" v-bind:state="state" v-bind:key="state.switch"></switch-state>\
                                </div>\
                            </fieldset>\
                            <fieldset v-if="state.sensorCount"><legend>Sensors</legend>\
                                <div class="verticalContainer">\
                                    <sensor-state v-for="config in config.sensorConfig" v-bind:item="config" v-bind:itemState="state.sensorState[config.sensor]" v-bind:key="config.sensor"></sensor-state>\
                                </div>\
                            </fieldset>\
                            <fieldset v-if="state.cameraCount"><legend>Cameras</legend>\
                            </fieldset>\
                        </div>'


        })

        Vue.component('app-content-config', {
            props: ["state", "devices"],
            template: '<div id="config">\
                            <fieldset><legend>Devices</legend>\
                                <fieldset v-if="devices.instances.length"><legend>Installed</legend>\
                                    <div class="verticalContainer">\
                                        <div v-for="instance in devices.instances">\
                                            <div class="horizontalContainer">\
                                                <div>{{ instance.name }} </div>\
                                                <button class="button_red" v-on:click="removePressed(instance.id,instance.config,instance.instance,instance.name)">\
                                                Remove\
                                                </button>\
                                            </div>\
                                        <br>\
                                        </div>\
                                    </div>\
                                </fieldset>\
                                <fieldset><legend>Available</legend>\
                                    <div class=horizontalContainer>\
                                        <select v-on:change="deviceChanged($event)">\
                                            <option v-bind:value="newdevice.id" v-for="(newdevice,index) in devices.options" v-bind:key="newdevice.id" v-bind:selected="index === 0"> {{newdevice.name}}</option>\
                                        </select>\
                                        <div v-if="deviceActive(newdevice.id)" v-for="newdevice in devices.options">\
                                            <div v-for="opts in newdevice.config">{{opts.name}}\
                                                <select v-if="opts.type==\'select\'">\
                                                    <option v-bind:value="opt.value" v-for="opt in opts.options">{{ opt.name }}</option>\
                                                </select>\
                                            </div>\
                                        </div>\
                                        <button>Add</button>\
                                    </div>\
                                </fieldset>\
                            </fieldset>\
                        </div>',
            methods: {
                removePressed: function(id, config, instance, name) {
                    if (confirm("About to remove device '" + name + "'")) {
                        var jsonData = {}
                        jsonData["id"] = id;
                        jsonData["config"] = config;
                        jsonData["instance"] = instance;
                        let url = base + '/json/devices/del'
                        postSettingReturnPromise(jsonData, url).then(function(response) {
                            refreshData(true)
                        })
                    }
                },
                deviceChanged: function(event) {
                    console.log('deviceChanged ' + event.target.value)
                    this.activeDevice = event.target.value

                    console.log('setting ' + this.activeDevice)

                },
                deviceActive: function(id) {
                    console.log('deviceActive ' + this.activeDevice)
                    return id == this.activeDevice
                }
            },
            data: function() {
                return {
                    activeDevice: 1
                }
            }
        })

        Vue.component('app-content-admin', {
            props: ["config", "peers"],

            methods: {
                setFriendlyName: function(newfname) {
                    this.sendConfig("friendlyName", newfname)
                },
                setPrerelease: function(prerel) {
                    this.sendConfig("prerelease", prerel)
                },
                setUpgradeBehaviour: function(uponoff) {
                    this.sendConfig("upgradeOnlyWhenRelayOff", uponoff)
                },

                sendConfig: function(prop, val) {
                    var jsonData = {}
                    jsonData[prop] = val;
                    let url = base + '/json/config'
                    postSettingReturnPromise(jsonData, url).then(function(response) {
                        refreshData(true)
                    })
                },

                resetWifi: function() {
                    let url = base + '/resetWIFI'
                    postSettingReturnPromise({}, url).then(function(response) {
                        refreshData(true)
                    })

                },
                rebootDevice: function() {
                    let url = base + '/reboot'
                    postSettingReturnPromise({}, url).then(function(response) {
                        refreshData(true)
                    })

                }

            },




            template: '<div id="admin">\
                            <fieldset><legend>Name</legend>\
                                <div class="horizontalContainer">\
                                    <div>\
                                        <input v-model="config.friendlyName" type="text"></input>\
                                    </div>\
                                    <div>\
                                        <button v-on:click="setFriendlyName(config.friendlyName)">Set</button>\
                                    </div>\
                                </div>\
                            </fieldset>\
                            <fieldset><legend>Options</legend>\
                                <fieldset><legend>OTA</legend>\
                                    <div class="vertalContainer">\
                                        <div class="horizontalContainer">\
                                            <span>Update while on?</span>\
                                            <input v-model="config.upgradeOnlyWhenRelayOff" v-on:change="setUpgradeBehaviour(config.upgradeOnlyWhenRelayOff)" type="checkbox"></input>\
                                        </div>\
                                        <div class="horizontalContainer">\
                                            <span>Accept pre-releases?</span>\
                                            <input type="checkbox" v-model="config.prerelease" v-on:change="setPrerelease(config.prerelease)"></input>\
                                        </div>\
                                    </div>\
                                </fieldset>\
                                <div class="vertalContainer">\
                                    <div class="horizontalContainer">\
                                        <button class="button_red" v-on:click="resetWifi()">Reset Wifi Details</button>\
                                        <button v-if="config.developer" class="button_red" v-on:click="rebootDevice()">Reboot Device</button>\
                                    </div>\
                                </div>\
                            </fieldset>\
                            <fieldset><legend>Peers</legend>\
                                <div class="verticalContainer">\
                                    <div class="horizontalContainer" v-for="peer in peers.peers">\
                                        <span>\
                                            <a target="_blank" v-bind:href="\'http://\'+peer.ip">{{ peer.name }}</a>\
                                        </span>\
                                    </div>\
                                </div>\
                            </fieldset>\
                        </div>'

        })

        Vue.component('app-content-logging', {
            props: ["logging"],
            template: '<div class="verticalContainer"> \
                            <fieldset><legend>Logging</legend>\
                                <fieldset><legend>Level</legend>\
                                    <div class="horizontalContainer">\
                                        <select v-model="logging.level">\
                                            <option v-bind:value="level.value" v-for="level in logging.levels">{{ level.name }}</option>\
                                        </select>\
                                        <button v-on:click="setLogLevel(logging.level)">Set</button>\
                                    </div>\
                                </fieldset>\
                                <fieldset><legend>Implementation</legend>\
                                    <div class="horizontalContainer">\
                                        <select v-model="logging.impl">\
                                            <option v-bind:value="impl.value" v-for="impl in logging.impls">{{ impl.name }}</option>\
                                        </select>\
                                        <button class="button_red" v-on:click="setLogImpl(logging.impl)">Set</button>\
                                    </div>\
                                </fieldset>\
                            </fieldset>\
                        </div>',
            methods: {
                setLogLevel: function(level) {

                    var jsonData = {}
                    jsonData["level"] = level
                    let url = base + '/json/logging'
                    postSettingReturnPromise(jsonData, url).then(function(response) {
                        refreshData(true)
                    })


                },

                setLogImpl: function(impl) {
                    if (confirm("About to change debug impl and reboot device - OK?")) {

                        var jsonData = {}
                        jsonData["impl"] = impl
                        let url = base + '/json/logging'
                        postSettingReturnPromise(jsonData, url).then(function(response) {
                            refreshData(true)
                        })
                    }

                }

            }

        })


        var app = new Vue({
            el: '#app',
            methods: {
                tabSelected: function(name) {
                    this.pages.activePage = name
                },
                isTabSelected: function(name) {
                    return this.pages.activePage == name
                }
            },
            data: {
                internal: {
                    firstTimeFetch: true
                },
                pages: {
                    activePage: 'Home',
                    pages: [{
                        name: "Home",
                        ordinal: 0
                    }, {
                        name: "Devices",
                        ordinal: 1
                    }, {
                        name: "Admin",
                        ordinal: 2
                    }, {
                        name: "Logging",
                        ordinal: 3
                    }]
                },
                config: {
                    "populated": true,
                    "name": "esp_2dacf4",
                    "version": "sonoff_basic|v0.1.7.pr",
                    "ip": "192.168.51.110",
                    "mac": "DC:4F:22:2D:AC:F4",
                    "friendlyName": "upright",
                    "prerelease": 0,
                    "upgradeOnlyWhenRelayOff": 1,
                    "switchCount": 1,
                    "switchConfig": [{
                        "switch": 0,
                        "impl": "rest",
                        "name": "Default"
                    }],
                    "sensorCount": 3,
                    "sensorConfig": [{
                        "sensor": 0,
                        "elements": [{
                            "type": "temperature",
                            "uom": "°C",
                            "round": "1"
                        }],
                        "name": "DS18B20"
                    }, {
                        "sensor": 1,
                        "elements": [{
                            "type": "temperature",
                            "uom": "°C",
                            "round": "1"
                        }, {
                            "type": "pressure",
                            "uom": "hPa",
                            "round": "1"
                        }, {
                            "type": "humidity",
                            "uom": "%",
                            "round": "0"
                        }],
                        "name": "BME280"
                    }, {
                        "sensor": 2,
                        "elements": [{
                            "type": "illuminance",
                            "uom": "Lux",
                            "round": "0"
                        }],
                        "name": "MAX44009"
                    }]
                },
                state: {
                    "name": "esp_2dacf4",
                    "friendlyName": "upright",
                    "ip": "192.168.51.110",
                    "switchCount": 1,
                    "switchState": [{
                        "switch": 0,
                        "state": 0,
                        "stateChanges": 12,
                        "type": "Momentary",
                        "name": "Default"
                    }],
                    "sensorCount": 3,
                    "sensorState": [{
                        "sensor": 0,
                        "temperature_error": "No DSs found",
                        "name": "DS18B20"
                    }, {
                        "sensor": 1,
                        "temperature": 25,
                        "pressure": 1021.249,
                        "humidity": 66.44434,
                        "name": "BME280"
                    }, {
                        "sensor": 2,
                        "illuminance": 414.72,
                        "name": "MAX44009"
                    }],
                    "cameraCount": 0
                },
                devices: {
                    "instances": [{
                        "id": 256,
                        "config": "{\"GPIO\":13}",
                        "name": "Dallas Temperature Sensor",
                        "instance": 1073684292
                    }, {
                        "id": 257,
                        "config": "",
                        "name": "BME280 Environment Sensor",
                        "instance": 1073684612
                    }, {
                        "id": 258,
                        "config": "",
                        "name": "MAX44009 Lux Sensor",
                        "instance": 1073684988
                    }],
                    "options": [{
                        "name": "Dallas Temperature Sensor",
                        "id": 256,
                        "config": [{
                            "name": "GPIO",
                            "type": "select",
                            "options": [{
                                "name": "D0",
                                "value": 16
                            }, {
                                "name": "D1",
                                "value": 5
                            }, {
                                "name": "D2",
                                "value": 4
                            }, {
                                "name": "D5",
                                "value": 14
                            }, {
                                "name": "D6",
                                "value": 12
                            }, {
                                "name": "D7",
                                "value": 13
                            }]
                        }]
                    }, {
                        "name": "BME280 Environment Sensor",
                        "id": 257
                    }, {
                        "name": "MAX44009 Lux Sensor",
                        "id": 258
                    }, {
                        "name": "HC-SR501 PIR Sensor",
                        "id": 259,
                        "config": [{
                            "name": "GPIO",
                            "type": "select",
                            "options": [{
                                "name": "D0",
                                "value": 16
                            }, {
                                "name": "D1",
                                "value": 5
                            }, {
                                "name": "D2",
                                "value": 4
                            }, {
                                "name": "D5",
                                "value": 14
                            }, {
                                "name": "D6",
                                "value": 12
                            }, {
                                "name": "D7",
                                "value": 13
                            }]
                        }]
                    }]
                },
                peers: {
                    "name": "esp_b75c4f",
                    "peerCount": 2,
                    "ip": "192.168.51.144",
                    "peers": [{
                        "name": "esp_a799d7.local",
                        "ip": "192.168.51.136"
                    }, {
                        "name": "esp_583f4e.local",
                        "ip": "192.168.51.101"
                    }]
                },
                logging: {
                    "impl": 1,
                    "level": 0,
                    "impls": [{
                        "value": 0,
                        "name": "None",
                        "config": []
                    }, {
                        "value": 1,
                        "name": "Serial",
                        "config": []
                    }, {
                        "value": 2,
                        "name": "SysLog",
                        "config": [{
                            "name": "Host",
                            "type": "text"
                        }]
                    }],
                    "levels": [{
                        "value": 0,
                        "name": "Verbose"
                    }, {
                        "value": 1,
                        "name": "Info"
                    }, {
                        "value": 2,
                        "name": "Important"
                    }, {
                        "value": 3,
                        "name": "Warning"
                    }, {
                        "value": 4,
                        "name": "Error"
                    }]
                }

            },

        })
    </script>

    <script>
        function OnLoad() {

            return

            refreshData(app.internal.firstTimeFetch)

            app.internal.firstTimeFetch = false;

            setInterval(refreshData, 15 * 1000)

        }

        function refreshData(deep = false) {

            genericFetchJSONReturnPromise(base + '/json/state')
                .then(function(json) {
                    app.state = json
                }).then(function() {

                    // if deep, get the expensive stuff
                    if (deep) {
                        // config
                        genericFetchJSONReturnPromise(base + '/json/config')
                            .then(function(json) {
                                app.config = json
                            }).then(function() {

                                genericFetchJSONReturnPromise(base + '/json/devices')
                                    .then(function(json) {
                                        app.devices = json
                                    }).then(function() {
                                        genericFetchJSONReturnPromise(base + '/json/peers')
                                            .then(function(json) {
                                                app.peers = json
                                            }).then(function(json) {
                                                genericFetchJSONReturnPromise(base + '/json/logging')
                                                    .then(function(json) {
                                                        app.logging = json
                                                    })
                                            })
                                    })
                            })
                    }
                })
        }

        function genericFetchJSONReturnPromise(url) {
            return fetch(url)
                .then(function(response) {
                    if (response.ok) {
                        var json = response.json()
                        return json;
                    }

                    throw new Error("fetch problem")
                })
        }

        function postSettingReturnPromise(config, url) {

            const options = {
                method: 'post',
                headers: {
                    'Content-type': 'text/json'
                },
                body: JSON.stringify(config)
            }

            return fetch(url, options)

        }
    </script>

</body>

</html>