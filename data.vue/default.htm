<html>

<head>

    <link rel="stylesheet" type="text/css" href="style.css">


    <script src="vue.min.js">
    </script>

</head>




<body onload="OnLoad()">
    <div id="app">
        <app-head v-bind:config="config"></app-head>
        <hr>
        <div v-if="config.wifiConfigured">
            <app-nav v-bind:pages="pages" v-on:clicked="tabSelected"></app-nav>
            <hr>
            <app-content-home v-if="isTabSelected('Home')" v-bind:state="state" v-bind:config="config"></app-content-home>
            <app-content-devices v-if="isTabSelected('Devices')" v-bind:state="state" v-bind:devices="devices"></app-content-devices>
            <app-content-admin v-if="isTabSelected('Admin')" v-bind:config="config" v-bind:peers="peers"></app-content-admin>
            <app-content-logging v-if="isTabSelected('Logging')" v-bind:logging="logging"></app-content-logging>
        </div>
        <div v-else>
            <div style="height: 66%;">
                <app-wizard-name v-bind:config="config" v-if="isWizSelected(0)"></app-wizard-name>
                <app-content-devices v-bind:devices="devices" v-bind:state="state" v-if="isWizSelected(1)"></app-content-devices>
                <app-wizard-wifi v-bind:wifi="wifi" v-if="isWizSelected(2)"></app-wizard-wifi>
            </div>
            <div>
                <app-wizard-nextprev v-bind:pages="wizardpages" v-bind:wifi="wifi" v-on:clicked="wizSelected"></app-wizard-nextprev>
            </div>
        </div>
    </div>

    <script>
        //let base = "http://192.168.51.110"
        let base = ""
        //let base = "http://192.168.51.139"




        // navbar
        Vue.component('app-nav', {
            props: ['pages'],
            template: '<ul class="main">\
                            <li v-bind:class="{ activeTab: pages.activePage==page.name}"  v-for="page in pages.pages" v-on:click="clicked(page.name)" >{{ page.name }}</li>\
                        </ul>',
            methods: {
                clicked: function(pagename) {
                    this.$emit('clicked', pagename)
                }
            }
        })

        // define the header
        Vue.component('app-head', {
            props: ["config"],
            template: '<div class="heading">\
                            <div class="vertverticalContainer"></div>\
                                <div v-if="config.name" class="horizontalContainer">\
                                    <div >{{ config.name }}</div>\
                                    <div v-for="ver in config.version.split(\'|\')">{{ ver }}</div>\
                                </div>\
                        </div>'

        })

        Vue.component('switch-state', {
            props: ["state"],
            template: '<div><div class="horizontalContainer"><div>{{ state.name }} </div>\
            <button v-on:click="switchPressed(state.switch, state.state?\'off\':\'on\')">\
                <span v-if="state.state==0">Turn ON</span>\
                <span v-else>Turn OFF</span>\
            </button>\
            </div><br></div>',
            methods: {

                switchPressed: function(id, newstate) {
                    let url = base + '/button?port=' + id + '&action=' + newstate
                    postSettingReturnPromise({}, url).then(function(response) {
                        refreshData(false)
                    })
                }
            }
        })


        Vue.component('sensor-state', {
            props: ["item", "itemState"],
            template: '<div><div class="horizontalContainer">\
                            <div>{{ item.name }}</div>\
                            <div class="verticalContainer">\
                                    <div v-for="element in item.elements">{{ element.type }}: {{ itemState[element.type] }} {{ element.uom }}</div>\
                            </div>\
                        </div><br></div>'
        })

        Vue.component('app-content-home', {
            props: ["state", "config"],
            template: '<div id="home">\
                            <fieldset v-if="state.switchCount"><legend>Switches</legend>\
                                <div class="verticalContainer">\
                                    <switch-state v-for="state in state.switchState" v-bind:state="state" v-bind:key="state.switch"></switch-state>\
                                </div>\
                            </fieldset>\
                            <fieldset v-if="state.sensorCount"><legend>Sensors</legend>\
                                <div class="verticalContainer">\
                                    <sensor-state v-for="config in config.sensorConfig" v-bind:item="config" v-bind:itemState="state.sensorState[config.sensor]" v-bind:key="config.sensor"></sensor-state>\
                                </div>\
                            </fieldset>\
                            <fieldset v-if="state.cameraCount"><legend>Cameras</legend>\
                            </fieldset>\
                        </div>'


        })

        Vue.component('app-content-devices', {
            props: ["state", "devices"],
            template: '<div id="config">\
                            <fieldset><legend>Devices</legend>\
                                <fieldset v-if="devices.instances.length"><legend>Installed</legend>\
                                    <div class="verticalContainer">\
                                        <div v-for="instance in devices.instances">\
                                            <div class="horizontalContainer">\
                                                <div>{{ instance.name }} </div>\
                                                <div>{{ instance.config }} </div>\
                                                <button class="button_red" v-on:click="removePressed(instance.id,instance.config,instance.instance,instance.name)">\
                                                Remove\
                                                </button>\
                                            </div>\
                                        <br>\
                                        </div>\
                                    </div>\
                                </fieldset>\
                                <fieldset><legend>Available</legend>\
                                    <div class=horizontalContainer>\
                                        <select v-on:change="deviceChanged($event)">\
                                            <option v-bind:value="newdevice.id" v-for="(newdevice,index) in devices.options" v-bind:key="newdevice.id" v-bind:selected="index === 0"> {{newdevice.name}}</option>\
                                        </select>\
                                        <div v-if="deviceActive(newdevice.id)" v-for="newdevice in devices.options">\
                                            <div v-for="opts in newdevice.config">{{opts.name}}\
                                                <select v-if="opts.type==\'select\'">\
                                                    <option v-bind:value="opt.value" v-for="opt in opts.options">{{ opt.name }}</option>\
                                                </select>\
                                            </div>\
                                        </div>\
                                        <button>Add</button>\
                                    </div>\
                                </fieldset>\
                            </fieldset>\
                        </div>',
            methods: {
                removePressed: function(id, config, instance, name) {
                    if (confirm("About to remove device '" + name + "'")) {
                        var jsonData = {}
                        jsonData["id"] = id;
                        jsonData["config"] = config;
                        jsonData["instance"] = instance;
                        let url = base + '/json/devices/del'
                        postSettingReturnPromise(jsonData, url).then(function(response) {
                            refreshData(true)
                        })
                    }
                },
                deviceChanged: function(event) {
                    this.activeDevice = event.target.value
                },
                deviceActive: function(id) {
                    return id == this.activeDevice
                }
            },
            data: function() {
                return {
                    activeDevice: 1
                }
            }
        })

        Vue.component('app-content-admin', {
            props: ["config", "peers"],

            methods: {
                setFriendlyName: function(newfname) {
                    this.sendConfig("friendlyName", newfname)
                },
                setPrerelease: function(prerel) {
                    this.sendConfig("prerelease", prerel)
                },
                setUpgradeBehaviour: function(uponoff) {
                    this.sendConfig("upgradeOnlyWhenRelayOff", uponoff)
                },

                sendConfig: function(prop, val) {
                    var jsonData = {}
                    jsonData[prop] = val;
                    let url = base + '/json/config'
                    postSettingReturnPromise(jsonData, url).then(function(response) {
                        refreshData(true)
                    })
                },

                resetWifi: function() {
                    let url = base + '/resetWIFI'
                    postSettingReturnPromise({}, url).then(function(response) {
                        refreshData(true)
                    })

                },
                rebootDevice: function() {
                    let url = base + '/reboot'
                    postSettingReturnPromise({}, url).then(function(response) {
                        refreshData(true)
                    })

                }

            },




            template: '<div id="admin">\
                            <fieldset><legend>Name</legend>\
                                <div class="horizontalContainer">\
                                    <div>\
                                        <input v-model="config.friendlyName" type="text"></input>\
                                    </div>\
                                    <div>\
                                        <button v-on:click="setFriendlyName(config.friendlyName)">Set</button>\
                                    </div>\
                                </div>\
                            </fieldset>\
                            <fieldset><legend>Options</legend>\
                                <fieldset><legend>OTA</legend>\
                                    <div class="vertalContainer">\
                                        <div class="horizontalContainer">\
                                            <span>Update while on?</span>\
                                            <input v-model="config.upgradeOnlyWhenRelayOff" v-on:change="setUpgradeBehaviour(config.upgradeOnlyWhenRelayOff)" type="checkbox"></input>\
                                        </div>\
                                        <div class="horizontalContainer">\
                                            <span>Accept pre-releases?</span>\
                                            <input type="checkbox" v-model="config.prerelease" v-on:change="setPrerelease(config.prerelease)"></input>\
                                        </div>\
                                    </div>\
                                </fieldset>\
                                <div class="vertalContainer">\
                                    <div class="horizontalContainer">\
                                        <button class="button_red" v-on:click="resetWifi()">Reset Wifi Details</button>\
                                        <button v-if="config.developer" class="button_red" v-on:click="rebootDevice()">Reboot Device</button>\
                                    </div>\
                                </div>\
                            </fieldset>\
                            <fieldset><legend>Peers</legend>\
                                <div class="verticalContainer">\
                                    <div class="horizontalContainer" v-for="peer in peers.peers">\
                                        <span>\
                                            <a target="_blank" v-bind:href="\'http://\'+peer.ip">{{ peer.name }}</a>\
                                        </span>\
                                    </div>\
                                </div>\
                            </fieldset>\
                        </div>'

        })

        Vue.component('app-content-logging', {
            props: ["logging"],
            template: '<div class="verticalContainer"> \
                            <fieldset><legend>Logging</legend>\
                                <fieldset><legend>Level</legend>\
                                    <div class="horizontalContainer">\
                                        <select v-model="logging.level">\
                                            <option v-bind:value="level.value" v-for="level in logging.levels">{{ level.name }}</option>\
                                        </select>\
                                        <button v-on:click="setLogLevel(logging.level)">Set</button>\
                                    </div>\
                                </fieldset>\
                                <fieldset><legend>Implementation</legend>\
                                    <div class="horizontalContainer">\
                                        <select v-model="logging.impl">\
                                            <option v-bind:value="impl.value" v-for="impl in logging.impls">{{ impl.name }}</option>\
                                        </select>\
                                        <button class="button_red" v-on:click="setLogImpl(logging.impl)">Set</button>\
                                    </div>\
                                </fieldset>\
                            </fieldset>\
                        </div>',
            methods: {
                setLogLevel: function(level) {

                    var jsonData = {}
                    jsonData["level"] = level
                    let url = base + '/json/logging'
                    postSettingReturnPromise(jsonData, url).then(function(response) {
                        refreshData(true)
                    })


                },

                setLogImpl: function(impl) {
                    if (confirm("About to change debug impl and reboot device - OK?")) {

                        var jsonData = {}
                        jsonData["impl"] = impl
                        let url = base + '/json/logging'
                        postSettingReturnPromise(jsonData, url).then(function(response) {
                            refreshData(true)
                        })
                    }

                }

            }

        })

        // wizard

        Vue.component('app-wizard-name', {
            props: ["config"],
            template: '<div>\
                            <fieldset><legend>Name</legend>\
                                <div class="horizontalContainer">\
                                    <div>\
                                        <input v-model="config.friendlyName" type="text"></input>\
                                    </div>\
                                    <div>\
                                    </div>\
                                </div>\
                            </fieldset>\
                         </div>'
        })

        Vue.component('app-wizard-nextprev', {
            props: ["pages", "wifi"],
            methods: {
                clicked: function(pagenum) {

                    if (this.onFinishWiz() && pagenum == 1)
                        this.$emit('clicked', 0)
                    else
                        this.$emit('clicked', pagenum)
                },

                onFinishWiz: function() {
                    if (this.pages.activePageNum == 2)
                        return true

                    return false

                },

                finishEnabled: function() {

                    if (!this.onFinishWiz())
                        return false

                    if (this.wifi.static.active && (!this.wifi.static.ip || !this.wifi.static.gw || !this.wifi.static.netmask)) {
                        return true
                    }

                    if (!this.wifi.password || !this.wifi.password.length)
                        return true

                    return false
                }
            },

            template: '<div class="horizontalContainerMid">\
                        <button v-bind:disabled="pages.activePageNum==0" v-on:click="clicked(-1)">Previous</button>\
                        <button v-bind:disabled="finishEnabled()" v-on:click="clicked(+1)">{{ pages.activePageNum==2?\'Finish\':\'Next\' }}</button>\
                        </div>'
        })

        Vue.component('app-wizard-wifi', {
            props: ["wifi"],
            template: '<div>\
                            <fieldset v-if="wifi.ssids.length">\
                            <legend>Wifi Details</legend>\
                                <fieldset>\
                                    <div>\
                                        Configure network access for this device\
                                    </div>\
                                </fieldset>\
                                <br>\
                                <fieldset>\
                                    <div class="horizontalContainer">\
                                        <div>SSID</div>\
                                        <div>\
                                            <select v-model="wifi.ssid">\
                                                <option v-bind:value="wifi.ssid" v-for="(wifi,index) in wifi.ssids" v-bind:key="wifi.ssid" v-bind:selected="index === 0"> {{wifi.ssid}}</option>\
                                            </select>\
                                        </div>\
                                    </div>\
                                    <div class="horizontalContainer">\
                                        <div>Password</div>\
                                        <div><input name="pwd" size="15" type="password" v-model="wifi.password" /></div>\
                                    </div>\
                                    <div class="horizontalContainer">\
                                        <div>Address Type</div>\
                                        <div>\
                                            <select id="dhcp" v-model="wifi.static.active">\
                                            <option value=0>DHCP</option>\
                                            <option value=1>Static</option>\
                                        </select>\
                                        </div>\
                                    </div>\
                                    <fieldset v-if="wifi.static.active==1">\
                                        <legend>Static Details</legend>\
                                        <div class="horizontalContainer">\
                                            <div>IP:</div>\
                                            <div><input type="text" v-model="wifi.static.ip"/></div>\
                                        </div>\
                                        <div class="horizontalContainer">\
                                            <div>Gateway:</div>\
                                            <div><input type="text" v-model="wifi.static.gw"/></div>\
                                        </div>\
                                        <div class="horizontalContainer">\
                                            <div>Netmask:</div>\
                                            <div><input type="text" value="255.255.255.0" v-model="wifi.static.netmask"></div>\
                                        </div>\
                                    </fieldset>\
                                </fieldset>\
                            </fieldset>\
                        </div>'
        })

        var app = new Vue({
            el: '#app',
            methods: {
                tabSelected: function(name) {
                    this.pages.activePage = name
                },
                isTabSelected: function(name) {
                    return this.pages.activePage == name
                },

                wizSelected: function(offset) {

                    if (!offset) {
                        // it's finish!
                        var jsonData = {}
                        jsonData["ssid"] = this.wifi.ssid;
                        jsonData["pwd"] = this.wifi.password;
                        jsonData["friendlyName"] = this.config.friendlyName
                        jsonData["dhcp"] = this.wifi.static.active;

                        if (this.wifi.static.active) {
                            jsonData["ip"] = this.wifi.static.ip
                            jsonData["gateway"] = this.wifi.static.gw
                            jsonData["netmask"] = this.wifi.static.netmask

                        }

                        let url = base + '/json/wifi'
                        postSettingReturnPromise(jsonData, url).then(function(response) {
                            refreshData(true)
                        })

                        return
                    }

                    this.wizardpages.activePageNum += offset
                },
                isWizSelected: function(offset) {
                    return this.wizardpages.activePageNum == offset
                }


            },
            data: {
                internal: {
                    firstTimeFetch: true
                },
                wizardpages: {
                    activePageNum: 0,
                    pages: [{
                        name: "Name",
                        ordinal: 0
                    }, {
                        name: "Devices",
                        ordinal: 1
                    }, {
                        name: "Wifi",
                        ordinal: 2
                    }]
                },
                pages: {
                    activePage: 'Home',
                    pages: [{
                        name: "Home",
                        ordinal: 0
                    }, {
                        name: "Devices",
                        ordinal: 1
                    }, {
                        name: "Admin",
                        ordinal: 2
                    }, {
                        name: "Logging",
                        ordinal: 3
                    }]
                },
                wifi: {
                    "static": {
                        "active": 0,
                        "netmask": "255.255.255.0"
                    },
                    "ssids": []
                },
                config: {},

                state: {},

                devices: {
                    "instances": []
                },

                peers: {},
                logging: {},

            },

        })
    </script>

    <script>
        function OnLoad() {

            refreshData(app.internal.firstTimeFetch)

            app.internal.firstTimeFetch = false;

            setInterval(refreshData, 60 * 1000)

        }

        function refreshData(deep = false) {

            genericFetchJSONReturnPromise(base + '/json/state')
                .then(function(json) {
                    app.state = json
                }).then(function() {

                    // if deep, get the expensive stuff
                    if (deep) {
                        // config
                        genericFetchJSONReturnPromise(base + '/json/config')
                            .then(function(json) {
                                app.config = json
                            }).then(function() {
                                genericFetchJSONReturnPromise(base + '/json/devices')
                                    .then(function(json) {
                                        app.devices = json
                                    }).then(function() {
                                        genericFetchJSONReturnPromise(base + '/json/peers')
                                            .then(function(json) {
                                                app.peers = json
                                            }).then(function() {
                                                genericFetchJSONReturnPromise(base + '/json/logging')
                                                    .then(function(json) {
                                                        app.logging = json
                                                    }).then(function() {
                                                        genericFetchJSONReturnPromise(base + '/json/wificonfig')
                                                            .then(function(json) {
                                                                //app.wifi = json
                                                            }).then(function() {
                                                                genericFetchJSONReturnPromise(base + '/json/wifi')
                                                                    .then(function(json) {
                                                                        app.wifi.ssids = json.wifi
                                                                    })
                                                            })
                                                    })
                                            })
                                    })
                            })
                    }
                })
        }

        function genericFetchJSONReturnPromise(url) {
            return fetch(url)
                .then(function(response) {
                    if (response.ok) {
                        var json = response.json()
                        return json;
                    }

                    throw new Error("fetch problem")
                })
        }

        function postSettingReturnPromise(config, url) {

            const options = {
                method: 'post',
                headers: {
                    'Content-type': 'text/json'
                },
                body: JSON.stringify(config)
            }

            return fetch(url, options)

        }
    </script>

</body>

</html>