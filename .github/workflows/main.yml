#

name: barneymanCI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:

#  schedule:
#    - cron:  '*/30 * * * *'    
#    - cron:  '10 * * * *'    
  
  #release:
    # can get to the payload of the request https://developer.github.com/v3/repos/releases/#create-a-release
    # via github.event.release.
    #types: [published]

  push:
    branches: [ master ]
    
    tags:
      - v*

  pull_request:
    types: [opened, synchronize, reopened]

  #   branches: [ master ]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  determineVersion:
    outputs: 
      version_number: ${{ steps.realVersion.outputs.VERSION }}
      tagged: ${{ steps.realVersion.outputs.TAGGED }}

    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # - name: complex
      #   uses: reecetech/version-increment@2023.3.1
      #   id: calced-version

      - name: decide
        id: realVersion
        run: |
          echo ${{ github.ref }}
          echo ${{ steps.calced-version.outputs.v-version }}
          ref='refs/tags/v'
          if [[ ${{ github.ref }} == *${ref}* ]]; then
            v=$(echo ${{ github.ref }} | cut -d'/' -f3)
            echo "VERSION=${v}" >> "$GITHUB_OUTPUT"  
            echo "using ${v}"
            echo "TAGGED=yes" >> "$GITHUB_OUTPUT"  
          else
            echo "VERSION=v0.3.${{ github.run_number }}" >> "$GITHUB_OUTPUT"
            echo "using v0.3.${{ github.run_number }}"
            echo "TAGGED=no" >> "$GITHUB_OUTPUT"  
          fi

  # output some env vars, for later use :)
  paintEnvs:
    runs-on: ubuntu-latest
    steps:
      # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
      - name: Context         

        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          echo "github.event_name"
          echo "${{ github.event_name }}"
          echo "github.ref"
          echo "${{ github.ref }}"
          echo "$GITHUB_CONTEXT"

  createRelease:
    needs: [determineVersion]
    outputs:
      asset_url: ${{ steps.create_release.outputs.upload_url }}
      asset_id: ${{ steps.create_release.outputs.id }}
    runs-on: ubuntu-latest
    steps:

      - name: Create Release
        # no need if we're doing a build after push
        #if: ${{ github.event_name == 'create' }}
        if: ${{ needs.determineVersion.outputs.tagged == 'yes' }}
        id: create_release
        uses: actions/create-release@latest
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
          tag_name: ${{ github.ref }}
          # must use another release name! Release ${{ github.ref }} got created to get here
          release_name: Release ${{ needs.determineVersion.outputs.version_number }} (Created from `push tags` build action)
          # ${{ github.event.release.body }}
          body: | 
            Release
          # save it as draft until all assets are uploaded, then undraft it at the end
          draft: true
          prerelease: ${{endsWith(github.ref,'pr')}}

  # This workflow contains a single job called "build"
  builder:
    needs: [createRelease, determineVersion]

    # create a matrix 
    # wemos d1 - esp8266:esp8266:d1
    strategy:
      matrix: 
        include:
          # unproven!
          - platform: "esp32cam"
            platform_options: "esp32:esp32:esp32wrover:PartitionScheme=min_spiffs,FlashMode=qio,FlashFreq=80,UploadSpeed=115200,DebugLevel=none"
            friendly: "esp32_cam"
            spiffsCmdLine: -p 256 -b 4096 -s 0x3D0000
            spiffsCmd: ~/.arduino15/packages/esp32/tools/mkspiffs/0.2.3/mkspiffs

          - platform: "sonoff"
            # have to use generic, because the sonoff board doesn't SDA & others defined
            # platform_options: "esp8266:esp8266:sonoff:BoardModel=sonoffBasic,xtal=80,vt=flash,exception=legacy,ssl=all,eesz=1M256,ip=lm2f,dbg=Disabled"
            platform_options: "esp8266:esp8266:generic:xtal=80,vt=iram,exception=disabled,stacksmash=disabled,ssl=all,mmu=3232,non32xfer=fast,ResetMethod=ck,CrystalFreq=26,FlashFreq=40,FlashMode=dout,eesz=1M128,led=13,sdk=nonosdk_190703,ip=lm2f,dbg=Disabled,lvl=None____,wipe=none,baud=115200"
            friendly: "sonoff_basic"
            spiffsCmdLine: -p 256 -b 4096 -s 0x20000
            spiffsCmd: ~/.arduino15/packages/esp8266/tools/mkspiffs/3.0.4-gcc10.3-1757bed/mkspiffs

          - platform: "d1_mini"
            platform_options: "esp8266:esp8266:d1_mini:xtal=80,vt=iram,exception=disabled,ssl=all,eesz=4M1M,ip=lm2f,dbg=Disabled"
            friendly: "wemosD1"        
            spiffsCmdLine: -p 256 -b 8192 -s 0xFA000
            spiffsCmd: ~/.arduino15/packages/esp8266/tools/mkspiffs/3.0.4-gcc10.3-1757bed/mkspiffs
            # 1028096:  

    # The type of runner that the job will run on
    # to get py 2.7
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Environment
        run: |
          echo ${GITHUB_REF}
          echo ${GITHUB_REPOSITORY}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checking out tag ${{ github.ref }}
        uses: actions/checkout@v3
        with:
          submodules: "true"

      - name: gzip web content
        run: |
          cd ./data
          gzip -v *.htm
          gzip -v *.css
          cd ..

      # esp32cam builder needs py
      # https://github.com/marketplace/actions/python-dependency-installation 
      # esp32 esptool needs serial
      - name: install py
        if: ${{ matrix.friendly == 'esp32_cam' }}
        uses: actions/setup-python@v4
        with:
          python-version: '2.7.18'

      # esp32 needs serial around to build successfully
      - name: Install Python dependencies
        if: ${{ matrix.friendly == 'esp32_cam' }}
        uses: py-actions/py-dependency-install@v2      
     
      
      # We use the arduino/setup-arduino-cli action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.1.1
        with:
          version: "0.22.0"
      
      - name: Install platform
        run: |
          arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json,https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core install esp8266:esp8266@3.0.2 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
          arduino-cli core install esp32:esp32@2.0.2 --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

      # Finally, we compile the sketch, using the FQBN that was set
      # in the build matrix.
      - name: Compile Sketch Matrix
        run: arduino-cli compile --fqbn ${{ matrix.platform_options }} --output-dir . --build-property compiler.cpp.extra_flags="-D_VERSION_FRIENDLY_CLI=${{ matrix.friendly }} -D_VERSION_NUM_CLI=${{ needs.determineVersion.outputs.version_number }}"  --libraries ./libraries ESP8266-Light-Switch

      - name: rename output
        run: |
          mv ESP8266-Light-Switch.ino.elf ${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}.elf
          mv ESP8266-Light-Switch.ino.bin ${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}.bin

      - name: Create SPIFFS
        # no need if a push build
        run: ${{ matrix.spiffsCmd }} -c ./data ${{ matrix.spiffsCmdLine }} ${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}.spiffs

      # compress deliverables
      - name: Compress output
        # no need if a push build
        run: tar -czvf ${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}.tar.gz *.elf *.bin *.spiffs

      - name: Upload artifacts
        #if: ${{ github.event_name != 'create' }}
        if: ${{ needs.determineVersion.outputs.tagged != 'yes' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}
          path: ${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}.tar.gz


      - name: Upload Release Asset
        # no need if a push build
        #if: ${{ github.event_name == 'create' }}
        if: ${{ needs.determineVersion.outputs.tagged == 'yes' }}

        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ needs.createRelease.outputs.asset_url }} 
            asset_path: ./${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}.tar.gz
            asset_name: ${{ matrix.friendly }}-${{ needs.determineVersion.outputs.version_number }}.tar.gz
            asset_content_type: application/tar+gzip            
        
  undraft:
    runs-on: ubuntu-latest
    # no need if a push build
    #if: ${{ github.event_name == 'create' }}
    if: ${{ needs.determineVersion.outputs.tagged == 'yes' }}

    needs: [builder, createRelease]
    steps:
      - uses: octokit/request-action@v2.x
        id: changeDraft
        with:
          route: PATCH /repos/{repository}/releases/{id}
          repository: ${{ github.repository }}
          id: ${{ needs.createRelease.outputs.asset_id }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        
