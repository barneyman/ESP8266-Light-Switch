# This is a basic workflow to help you get started with Actions

name: barneymanCI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  # when a branch or tag is created
  create:
#  schedule:
    - cron:  '*/30 * * * *'    
#    - cron:  '10 * * * *'    
  
  #release:
    # can get to the payload of the request https://developer.github.com/v3/repos/releases/#create-a-release
    # via github.event.release.
    #types: [published]

#  push:
#    branches: [ master ]
  # pull_request:
  #   branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  builder:

    # create a matrix 
    # wemos d1 - esp8266:esp8266:d1
    strategy:
      matrix: 
        # generic needs some #define love - D7 doesnt exist
        platform: ["esp8266:esp8266:generic", "esp8266:esp8266:d1"]
        #platform: ["esp8266:esp8266:d1"]
        include:
          - platform: "esp8266:esp8266:generic"
            friendly: "sonoff_basic_"
            spiffsCmdLine: -p 256 -b 8192 -s 0x80000
          - platform: "esp8266:esp8266:d1"
            friendly: "wemosD1"        
            spiffsCmdLine: -p 256 -b 8192 -s 1028096  

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Environment
        run: |
          echo "setting up env ..."
          echo ${GITHUB_REF}
          echo ${GITHUB_REPOSITORY}
          echo "::set-env name=NEW_TAG::${GITHUB_REF#refs/tags/}"
          echo "::set-env name=NEW_HEAD::${GITHUB_REF#refs/heads/}"
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checking out tag ${{ github.ref }}
        uses: actions/checkout@master
        with:
          submodules: "true"
          ref: ${{ github.ref }}

      - name: Install mkspiffs
        run: |
          wget https://github.com/igrr/mkspiffs/releases/download/0.2.3/mkspiffs-0.2.3-generic-linux64.tar.gz
          tar -xvf mkspiffs-0.2.3-generic-linux64.tar.gz
          echo "::set-env name=MKSPIFFS_DIR::./mkspiffs-0.2.3-generic-linux64"
      
      
      # We use the arduino/setup-arduino-cli action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.0.0
      
      - name: Install platform
        run: |
            arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
            arduino-cli core install esp8266:esp8266@2.6.3 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json

      - name: Create SPIFFS
        run: ${{ env.MKSPIFFS_DIR }}/mkspiffs -c ./data ${{ matrix.spiffsCmdLine }} ${{ matrix.friendly }}.spiffs

      # Finally, we compile the sketch, using the FQBN that was set
      # in the build matrix.
      - name: Compile Sketch Matrix
        run: arduino-cli compile --fqbn ${{ matrix.platform }} --output ${GITHUB_RUN_ID}_lightswitch_${{ matrix.friendly }}  --libraries ./libraries ./lightswitch.ino 
      
      - name: Compress output
        run: tar -czvf release.tar.gz *.elf *.bin *.spiffs
        
      - name: Create Release
        if: ${{ false }}
        id: create_release
        uses: actions/create-release@latest
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
          tag_name: ${{ github.ref }}
          # must use another release name! Release ${{ github.ref }} got created to get here
          release_name: Release ${{ github.run_id }} (from Action)
          # ${{ github.event.release.body }}
          body: | 
            Release auto created by 
            'create tag' event
          draft: false
          prerelease: true

      - name: Upload Release Asset
        if: ${{ false }}
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./release.tar.gz
            asset_name: release_${{ env.NEW_TAG }}.tar.gz
            asset_content_type: application/tar+gzip    
        
    
