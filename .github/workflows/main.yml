#

name: barneymanCI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  # when a branch or tag is created - if the tag ends in 'pr' in it, it will be a pre-release 
  # otherwise a full release
  create:

#  schedule:
#    - cron:  '*/30 * * * *'    
#    - cron:  '10 * * * *'    
  
  #release:
    # can get to the payload of the request https://developer.github.com/v3/repos/releases/#create-a-release
    # via github.event.release.
    #types: [published]

  push:
    branches: [ master ]

  # pull_request:
  #   branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  # output some env vars, for later use :)
  paintEnvs:
    runs-on: ubuntu-latest
    steps:
      # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
      - name: Context
        run: |
          echo "github.event_name"
          echo "${{ github.event_name }}"
          echo "github.ref"
          echo "${{ github.ref }}"


  createRelease:
    runs-on: ubuntu-latest
    # no need if we're doing a build after push
    if: ${{ github.event_name != 'push' }}
    steps:

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
          tag_name: ${{ github.ref }}
          # must use another release name! Release ${{ github.ref }} got created to get here
          release_name: Release ${{ github.run_id }} (from Action)
          # ${{ github.event.release.body }}
          body: | 
            Release auto created by 
            'create tag' event
          # save it as draft until all assets are uploaded, then undraft it at the end
          draft: true
          prerelease: ${{endsWith(github.ref,'pr')}}
  
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt  

      - name: Output Release ID File
        run: echo "${{ steps.create_release.outputs.id }}" > release_id.txt

      - name: Save Release ID File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_id
          path: release_id.txt  

  # This workflow contains a single job called "build"
  builder:
    needs: [createRelease]

    # create a matrix 
    # wemos d1 - esp8266:esp8266:d1
    strategy:
      matrix: 
        include:
          # unproven!
          # - platform: "esp32cam"
          #   platform_options: "esp32:esp32:esp32wrover:PartitionScheme=min_spiffs,FlashMode=qio,FlashFreq=80,UploadSpeed=115200,DebugLevel=none"
          #   friendly: "esp32_cam"
          #   spiffsCmdLine: -p 256 -b 4096 -s 0x3D0000
          - platform: "sonoff"
            # have to use generic, because the sonoff board doesn't SDA & others defined
            # platform_options: "esp8266:esp8266:sonoff:BoardModel=sonoffBasic,xtal=80,vt=flash,exception=legacy,ssl=all,eesz=1M256,ip=lm2f,dbg=Disabled"
            platform_options: "esp8266:esp8266:generic:xtal=80,vt=iram,exception=legacy,ssl=all,ResetMethod=ck,CrystalFreq=26,FlashFreq=40,FlashMode=dout,eesz=1M128,led=13,sdk=nonosdk_190703,ip=lm2f,dbg=Disabled,lvl=None____"
            friendly: "sonoff_basic"
            spiffsCmdLine: -p 256 -b 4096 -s 0x20000
          - platform: "d1_mini"
            platform_options: "esp8266:esp8266:d1_mini:xtal=80,vt=iram,exception=legacy,ssl=all,eesz=4M1M,ip=lm2f,dbg=Disabled"
            friendly: "wemosD1"        
            spiffsCmdLine: -p 256 -b 8192 -s 0xFA000
            # 1028096:  

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: EnvironmentForRelease
        if: ${{ github.event_name != 'push' }}
        # remove refs/tags/ from github-ref
        run: |
          echo "setting up env for release ..."
          echo ${GITHUB_REF}
          echo ${GITHUB_REPOSITORY}
          echo "NEW_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "NEW_HEAD=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: EnvironmentForPush
        if: ${{ github.event_name == 'push' }}
        # remove refs/tags/ from github-ref
        run: |
          echo "setting up env for push ..."
          echo ${GITHUB_REF}
          echo ${GITHUB_REPOSITORY}
          echo "NEW_TAG=v0.0.0" >> $GITHUB_ENV
          echo "NEW_HEAD=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV


      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checking out tag ${{ github.ref }}
        uses: actions/checkout@master
        with:
          submodules: "true"
          ref: ${{ github.ref }}

      # esp32cam builder needs py
      # https://github.com/marketplace/actions/python-dependency-installation 
      # esp32 esptool needs serial
      - name: install py
        if: ${{ matrix.friendly == 'esp32_cam' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
     
      
      # We use the arduino/setup-arduino-cli action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.1.1
      
      - name: Install platform
        run: |
            arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json,https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
            arduino-cli core install esp8266:esp8266@2.6.3 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
            arduino-cli core install esp32:esp32 --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

      # Finally, we compile the sketch, using the FQBN that was set
      # in the build matrix.
      - name: Compile Sketch Matrix
        run: arduino-cli compile --fqbn ${{ matrix.platform_options }} --output-dir . --build-property compiler.cpp.extra_flags="-D_VERSION_FRIENDLY_CLI=${{ matrix.friendly }} -D_VERSION_NUM_CLI=${{ env.NEW_TAG }}"  --libraries ./libraries lightswitch

      # then handle spiffs
      - name: Install mkspiffs
        # no need if a push build
        if: ${{ github.event_name != 'push' }}
        run: |
          wget https://github.com/igrr/mkspiffs/releases/download/0.2.0/mkspiffs-0.2.0-no_magic_length-linux64.tar.gz
          tar -xvf mkspiffs-0.2.0-no_magic_length-linux64.tar.gz
          echo "MKSPIFFS_DIR=./mkspiffs-0.2.0-no_magic_length-linux64" >> $GITHUB_ENV

      - name: Create SPIFFS
        # no need if a push build
        if: ${{ github.event_name != 'push' }}
        run: ${{ env.MKSPIFFS_DIR }}/mkspiffs -c ./data ${{ matrix.spiffsCmdLine }} ${{ matrix.friendly }}_${GITHUB_RUN_ID}.spiffs

      # compress deliverables
      - name: Compress output
        # no need if a push build
        if: ${{ github.event_name != 'push' }}
        run: tar -czvf ${{ matrix.friendly }}.tar.gz *.elf *.bin *.spiffs
        
      - name: Load Release URL File from release job
        # no need if a push build
        if: ${{ github.event_name != 'push' }}
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        # no need if a push build
        if: ${{ github.event_name != 'push' }}
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        

      - name: Upload Release Asset
        # no need if a push build
        if: ${{ github.event_name != 'push' }}
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.get_release_info.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
            asset_path: ./${{ matrix.friendly }}.tar.gz
            asset_name: ${{ matrix.friendly }}_${{ env.NEW_TAG }}.tar.gz
            asset_content_type: application/tar+gzip            
        
  undraft:
    runs-on: ubuntu-latest
    # no need if a push build
    if: ${{ github.event_name != 'push' }}
    needs: [builder]
    steps:
      - name: Load Release ID File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_id
      - name: Get Release File Name & id
        id: get_release_id
        run: |
          value=`cat release_id/release_id.txt`
          echo ::set-output name=release_id::$value
          
      - uses: octokit/request-action@v2.x
        id: changeDraft
        with:
          route: PATCH /repos/{repository}/releases/{id}
          repository: ${{ github.repository }}
          id: ${{ steps.get_release_id.outputs.release_id }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        
