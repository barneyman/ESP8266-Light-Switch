<HTML>

<HEAD>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <TITLE>ESP8266</TITLE>
    <link rel="stylesheet" type="text/css" href="switch.css">
</HEAD>

<BODY onload="OnLoad()">

    <script src="common.js"></script>

    <div id="statusbar" hidden>
        <fieldset>
            <div id="statustext"></div>
        </fieldset>
    </div>


    <div class="verticalContainerFull">

        <iframe src="HeaderFrame.htm" id="header" name="header" onload="headerLoaded()"></iframe>

        <script>
        const frames = ["home","config", "admin", "logging"];

        </script>

        <ul id="menu" class="main">
            <li><a href="#" onclick="onMenu('home')">Home</a></li>
            <li><a href="#" onclick="onMenu('config')">Config</a></li>
            <li><a href="#" onclick="onMenu('admin')">Admin</a></li>
            <li><a href="#" onclick="onMenu('logging')">Logging</a></li>
        </ul>


        <div id="home">

            <fieldset id="switchSet" hidden>
                <legend>Switches</legend>
                <div class="verticalContainer" id="switches"></div>
            </fieldset>
            <br>
            <fieldset id="sensorSet" hidden>
                <legend>Sensors</legend>
                <div class="verticalContainer" id="sensors"></div>
            </fieldset>
            <fieldset id="cameraSet" hidden>
                <legend>Cameras</legend>
                <div class="verticalContainer" id="cameras"></div>
            </fieldset>
            <div class="horizontalContainerRight"><button id="refresh"
                    onclick="PopulateSwSenCamList(true)">Refresh</button></div>


        </div>

        <div id="admin" hidden>

            <fieldset>
                <legend>Name</legend>
                <div class="horizontalContainer">
                    <div><input type="text" id="friendlyname"></div>
                    <div><button onclick="setName()">Set</button></div>
                </div>
            </fieldset>
            <br>
            <fieldset>
                <legend>Options</legend>
                <div class="horizontalContainer" id="rebootButton" hidden>
                    <div>Reboot the device</div>
                    <div><button onclick="Reboot()">Reboot</button></div>
                </div>
                <div class="horizontalContainer">
                    <div>Reset WIFI</div>
                    <div><button onclick="ResetWIFI()">Reset</button></div>
                </div>
                <div class="horizontalContainer">
                    <div>Use Prereleases</div>
                    <div><input type="checkbox" id="prerelease" onclick="changePrelease()"></div>
                </div>
                <div class="horizontalContainer" id="upgradeWhenOffDiv">
                    <div>Upgrade When OFF</div>
                    <div><input type="checkbox" id="upgradeOnlyWhenRelayOff" onclick="changeUpgradeOnlyWhenRelayOff()"></div>
                </div>
            </fieldset>
            <br hidden>
            <fieldset hidden>
                <legend>Upgrade</legend>
                <div class="horizontalContainer">
                    <div>url</div>
                    <div><input type="text" id="host"></div>
                </div>
                <div>
                    <div class="horizontalContainerRight"><button onclick="OTAupdate()">Commit</button></div>
                </div>
            </fieldset>
            <br>
            <fieldset>
                <legend>Peers</legend>
                <div class="verticalContainer" id="peers"></div>
                <div class="horizontalContainerRight"><button onclick="fetchPeers()">Rescan</button></div>
            </fieldset>


        </div>

        <div id="config" hidden>
            <fieldset>
                <legend>Installed</legend>
                <div id="installed" class="verticalContainer" hidden=true>

                </div>
            </fieldset>
            <fieldset>
                <legend>Available</legend>
                <div class="horizontalContainer">
                    <select id="additionaDevices" onchange="showCorrectDeviceConfig()"></select>
                    <button onclick="addConfig()">Add</button>
                </div>
                <div class="verticalContainer" id="deviceConfig"></div>
            </fieldset>
        </div>

        <div id="logging" hidden>
            <fieldset>
                <legend>Level</legend>
                <div class="horizontalContainer">
                    <div>
                        <select id="loggingLevel"></select>
                    </div>
                    <div>
                        <button onclick="setLogLevel()">Set</button>
                    </div>
                </div>
            </fieldset>
            <br>
            <fieldset>
                <legend>Implementation</legend>
                <div class="horizontalContainer">
                <select id="loggingType" onchange="showCorrectConfigTab()"></select>
                <button onclick="setLogImpl()">Set</button>
                </div>
                <div class="verticalContainer" id="implConfig"></div>
            </fieldset>
        </div>


    </div>

    <script>



        function onMenu(divNameShow) {
            frames.forEach(function (item, index) {

                if (item == divNameShow) {
                    document.getElementById(item).hidden = false;
                }
                else {
                    document.getElementById(item).hidden = true;
                }


            });

        }

        function OnLoad() {

            //showStatus("Fetching ...")
            PopulateSwSenCamList(true)
            fetchPeers()
            getConfig()
            getLogging()
            //clearStatus();
            getDevices()
        }

        function postSetting(config, url)
        {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-type", "text/plain");
            xhr.send(JSON.stringify(config));
            
        }

        function setDebug(config)
        {
            let url = base + '/json/logging'
            postSetting(config,url)
        }


        function setLogLevel()
        {
            var jsonData={}
            var logLevel=document.getElementById("loggingLevel");
            jsonData["level"]=logLevel.value;
            setDebug(jsonData);

        }

        function setLogImpl()
        {
            var jsonData={}
            var logType=document.getElementById("loggingType");
            jsonData["impl"]=logType.value;

            // then get any config
            var configs=getImplConfigs()
            var selector=document.getElementById("loggingType");
            var selected=selector.options[selector.selectedIndex].innerText

            for(var loop=0;loop<configs.length;loop++)
            {
                item=configs.item(loop)

                if(item.getElementsByTagName("legend")[0].innerText==selected)
                {
                    var inputs=item.getElementsByTagName("input")
                    var jsonConfig={}

                    for(var eachItem=0;eachItem<inputs.length;eachItem++)
                    {
                        jsonConfig[inputs[eachItem].name]=inputs[eachItem].value
                    }
                    
                    jsonData["config"]=jsonConfig

                    break
                }
            }


            setDebug(jsonData);
        }



        function getImplConfigs()
        {
            // get the impl that's selected, and unhide that tab
            var configDiv=document.getElementById("implConfig")
            var configs=configDiv.getElementsByTagName("fieldset")
            return configs
        }

        function showCorrectConfigTab()
        {
            // get the impl that's selected, and unhide that tab
            var configs=getImplConfigs()
            var selector=document.getElementById("loggingType");
            var selected=selector.options[selector.selectedIndex].innerText

            for(var loop=0;loop<configs.length;loop++)
            {
                item=configs.item(loop)

                if(item.getElementsByTagName("legend")[0].innerText==selected)
                    item.hidden=false
                else
                    item.hidden=true
            }

        }

        function getDeviceConfigs()
        {
            var configDiv=document.getElementById("deviceConfig")
            var configs=configDiv.getElementsByTagName("fieldset")
            return configs
        }


        function showCorrectDeviceConfig()
        {
            // get the impl that's selected, and unhide that tab
            var configs=getDeviceConfigs()
            var selector=document.getElementById("additionaDevices");
            var selected=selector.options[selector.selectedIndex].innerText

            for(var loop=0;loop<configs.length;loop++)
            {
                item=configs.item(loop)

                if(item.getElementsByTagName("legend")[0].innerText==selected)
                    item.hidden=false
                else
                    item.hidden=true
            }            
        }

        function addConfig()
        {
            // get id and stringify the options
            var jsonData={}
            var devType=document.getElementById("additionaDevices");
            jsonData["id"]=devType.value;

            var options=getDeviceConfigs()
            var selector=devType
            var selected=selector.options[selector.selectedIndex].innerText

            for(var loop=0;loop<options.length;loop++)
            {
                item=options.item(loop)

                if(item.getElementsByTagName("legend")[0].innerText==selected)
                {
                    var inputs=item.getElementsByTagName("input")
                    var jsonConfig={}

                    for(var eachItem=0;eachItem<inputs.length;eachItem++)
                    {
                        jsonConfig[inputs[eachItem].name]=inputs[eachItem].value
                    }
                    
                    jsonData["config"]=jsonConfig

                    break
                }
            }

            let url = base + '/json/devices/add'
            postSetting(jsonData,url)



        }

        function removeDevice(id)
        {

            var jsonData={}

            jsonData["id"]=id;

            let url = base + '/json/devices/del'
            postSetting(jsonData,url)

            getDevices()

        }

        function getDevices()
        {
            let url = base + '/json/devices'

            fetch(url)
                .then(function (response) {
                    if (response.ok)
                        return response.json();
                    throw new Error('network err')
                })
                .then(function (data) {

                    var deviceConfig=document.getElementById("deviceConfig")
                    var deviceShown=document.getElementById("additionaDevices")
                    var deviceInstalled=document.getElementById("installed")

                    deviceShown.innerHTML=''
                    deviceInstalled.innerHTML=''

                    for(var eachinstall in data["instances"])
                    {
                        if(data["instances"].hasOwnProperty(eachinstall))
                        {
                            var installDiv=document.createElement("div")
                            installDiv.setAttribute("class","horizontalContainer")

                            var nameDiv=document.createElement("div")
                            nameDiv.innerText=data["instances"][eachinstall]["name"]

                            var delButton=document.createElement("button")
                            delButton.innerText="Remove"
                            delButton.setAttribute("onclick","removeDevice("+ data["instances"][eachinstall]["id"] +")")

                            installDiv.appendChild(nameDiv)
                            installDiv.appendChild(delButton)

                            deviceInstalled.appendChild(installDiv)
                        }
                    }


                    for(var eachDevice in data["options"])
                    {
                        if(data["options"].hasOwnProperty(eachDevice))
                        {
                            var opt=document.createElement("option")
                            opt.value=data["options"][eachDevice]["id"]
                            opt.innerText=data["options"][eachDevice]["name"]

                            deviceShown.appendChild(opt)

                            if(data["options"][eachDevice].hasOwnProperty("config"))
                            {
                                var deviceOptions=data["options"][eachDevice]["config"]

                                if(deviceOptions.length)
                                {
                                    addConfigItems(deviceConfig,data["options"][eachDevice]["name"],deviceOptions)    

                                }
                            }

                        }
                    }
                    showCorrectDeviceConfig()
                })            

        }

        function getLogging()
        {
            let url = base + '/json/logging'
            fetch(url)
                .then(function (response) {
                    if (response.ok)
                        return response.json();
                    throw new Error('network err')
                })
                .then(function (data) {

                    var logLevel=document.getElementById("loggingLevel");
                    var logType=document.getElementById("loggingType");

                    var configDiv=document.getElementById("implConfig")

                    logLevel.innerHTML=''
                    logLevel.innerHTML=''

                    for (var eachLevel in data["levels"]) 
                    {
                        if (data["levels"].hasOwnProperty(eachLevel))
                        {

                            var opt=document.createElement("option")
                            opt.value=data["levels"][eachLevel]["value"]
                            opt.innerText=data["levels"][eachLevel]["name"]

                            logLevel.appendChild(opt)

                            if(opt.value==data["level"])
                            {
                                opt.setAttribute("selected","selected")
                            }

                        }
                    }

                    for (var eachImpl in data["impls"]) 
                    {
                        if (data["impls"].hasOwnProperty(eachImpl))
                        {
                            // get the internal config items
                            var configItems=data["impls"][eachImpl]["config"]
                            if(configItems.length)
                            {
                                addConfigItems(configDiv,data["impls"][eachImpl]["name"],configItems)
                            }

                            var opt=document.createElement("option")
                            opt.value=data["impls"][eachImpl]["value"]
                            opt.innerText=data["impls"][eachImpl]["name"]

                            if(opt.value==data["impl"])
                            {
                                opt.setAttribute("selected","selected")
                            }

                            logType.appendChild(opt)
                        }
                    }

                    showCorrectConfigTab()


                })            
        }

        function getConfig()
        {
            let url = base + '/json/config'
            fetch(url)
                .then(function (response) {
                    if (response.ok)
                        return response.json();
                    throw new Error('network err')
                })
                .then(function (data) {

                    var checkbox=document.getElementById("prerelease");
                    if(data["prerelease"]==0)
                    {
                        checkbox.checked=false;
                    }
                    else
                    {
                        checkbox.checked=true;
                    }

                    var fname=document.getElementById("friendlyname");
                    fname.value=data["friendlyName"]

                    // check for switches
                    if(data["switchCount"]==0)
                    {
                        document.getElementById("upgradeWhenOffDiv").style.display= 'none' ;  
                    }
                    else
                    {
                        var upgradeOnlyWhenRelayOff=document.getElementById("upgradeOnlyWhenRelayOff")
                        if(data["upgradeOnlyWhenRelayOff"]==0)
                            upgradeOnlyWhenRelayOff.checked=false;
                        else
                            upgradeOnlyWhenRelayOff.checked=true;
                    }

                    if("developer" in data)
                    {
                        document.getElementById("rebootButton").hidden=false   
                    }

                })
        }

        function setConfig(config)
        {
            let url = base + '/json/config'
            postSetting(config,url)
        }

        function setName()
        {
            var jsonData={}
            var fname=document.getElementById("friendlyname");
            jsonData["friendlyName"]=fname.value;
            setConfig(jsonData)

        }

        function changePrelease()
        {
            var jsonData={}
            var checkbox=document.getElementById("prerelease");
            jsonData["prerelease"]=checkbox.checked?1:0;
            setConfig(jsonData)

        }

        function changeUpgradeOnlyWhenRelayOff()
        {
            
            var jsonData={}
            var checkbox=document.getElementById("upgradeOnlyWhenRelayOff");
            jsonData["upgradeOnlyWhenRelayOff"]=checkbox.checked?1:0;
            setConfig(jsonData)
        }

        function PopulateSwSenCamList(clearTheList) {


            let url = base + '/json/state'

            fetch(url)
                .then(function (response) {
                    if (response.ok)
                        return response.json();
                    throw new Error('network err')
                })
                .then(function (data) {

                    // then work out the switch states
                    var switches = data['switchState']
                    var sensors = data['sensorState']
                    var cameras = data['cameraState']

                    var tableSwitches = document.getElementById('switches')
                    var tableSensors = document.getElementById('sensors')
                    var tableCameras = document.getElementById('cameras')

                    var tableSwitchSet = document.getElementById('switchSet')
                    var tableSensorSet = document.getElementById('sensorSet')
                    var tableCameraSet = document.getElementById('cameraSet')

                    if (clearTheList) {
                        tableSensors.innerHTML = "";
                        tableSwitches.innerHTML = "";
                        tableCameras.innerHTML="";
                    }

                    // get counts
                    if (data['switchCount'] != "0") {
                        tableSwitchSet.hidden = false
                    }

                    if (data['sensorCount'] != "0") {
                        tableSensorSet.hidden = false
                    }

                    if (data['cameraCount'] != "0") {
                        tableCameraSet.hidden = false
                    }

                    // switches
                    for (var eachState in switches) {
                        if (switches.hasOwnProperty(eachState)) {

                            var switchNumber = switches[eachState]["switch"]


                            // create a row
                            var row = document.createElement("div")
                            row.className = "horizontalContainer"

                            var name = document.createElement("div")
                            name.innerText = switches[eachState]["name"]
                            row.appendChild(name)

                            button = document.createElement('button')
                            var buttonStateInverse = switches[eachState]["state"] == 0 ? "on" : "off"

                            if (switches[eachState]["state"] == 1) {
                                button.className = "button_red"
                            }

                            button.innerText = "Turn " + buttonStateInverse
                            button.setAttribute('onclick', 'Button("' + switchNumber + '","' + buttonStateInverse + '")')
                            row.appendChild(button)

                            tableSwitches.appendChild(row)

                        }
                    }

                    // sensors
                    for (var eachState in sensors) {
                        if (sensors.hasOwnProperty(eachState)) {

                            // sensor, name are always present
                            // anything else is the sensor

                            // create a row
                            var row = document.createElement("div")
                            row.className = "horizontalContainer"

                            var name = document.createElement("div")
                            name.innerText = sensors[eachState]["name"]
                            row.appendChild(name)

                            var sensorList= document.createElement("div")
                            sensorList.classList="verticalContainer"
                            row.appendChild(sensorList)

                            for (var key in sensors[eachState]) {
                                if (key == "name" || key == "sensor")
                                    continue
                                var state = document.createElement("div")
                                state.innerText = key + ":" + sensors[eachState][key]
                                sensorList.appendChild(state)


                            }

                            tableSensors.appendChild(row)
                            tableSensors.appendChild(document.createElement("br"))


                        }
                    }


                    // cameras
                    for (var eachCamera in cameras) {
                        if (cameras.hasOwnProperty(eachCamera)) {

                            // sensor, name are always present
                            // anything else is the sensor

                            // create a row
                            var row = document.createElement("div")
                            row.className = "horizontalContainer"

                            var name = document.createElement("div")
                            name.innerText = cameras[eachCamera]["name"]
                            row.appendChild(name)

                            var cameragImgDiv= document.createElement("div")
                            row.appendChild(cameragImgDiv)

                            var cameraImg=document.createElement("img")
                            cameraImg.src=base+"/camera?cam="+cameras[eachCamera]["camera"]
                            cameraImg.width=screen.width/3

                            cameragImgDiv.appendChild(cameraImg)


                            tableCameras.appendChild(row)
                            tableCameras.appendChild(document.createElement("br"))


                        }
                    }




                }).catch(function (error) {

                    alert(error.message)

                })

        }


        function Button(number, state) {

            let url = base + '/button?port=' + number + '&action=' + state

            var xhr = new XMLHttpRequest();

            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-type", "text/plain");

            xhr.onloadend = function () { PopulateSwSenCamList(true) }
            xhr.send();


        }

        function populateSinglePeer(peer, divToUse) {
            // then get the ver of that peer
            var peerUrl = peer + "json/config"
            fetch(peerUrl)
                .then(function (response) { return response.json(); })
                .then(function (data) {
                    divToUse.innerText = data["version"]
                })

        }

        function fetchPeers() {

            let url = base + '/json/peers'
            var numPages = 0;
            fetch(url)
                .then(function (response) { return response.json(); })
                .then(function (data) {
                    // populate the peers
                    var peers = document.getElementById('peers')
                    // clear the list
                    peers.innerHTML = ""
                    if (data["peerCount"] > 0) {
                        var peerArray = data["peers"]

                        for (var eachNode in peerArray) {
                            // we should find out if it's html version beats ours
                            // todo
                            var row = document.createElement("div")
                            row.className = "horizontalContainer"
                            var opt1 = document.createElement("div")
                            var opt2 = document.createElement("div")
                            opt2.className = "verticalContainer"
                            var opt2a = document.createElement("div")
                            var opt2b = document.createElement("div")

                            opt2.appendChild(opt2a)
                            opt2.appendChild(opt2b)

                            opt1.innerText = peerArray[eachNode]["name"];
                            var anchor = document.createElement("a")
                            anchor.innerText = peerArray[eachNode]["ip"];
                            anchor.href = "http://" + peerArray[eachNode]["ip"];
                            anchor.target = "_blank"
                            opt2a.appendChild(anchor)

                            populateSinglePeer(anchor.href, opt2b)

                            row.appendChild(opt1)
                            row.appendChild(opt2)
                            peers.appendChild(row);
                        }

                    }

                })

        }

        function Reboot() {

            let url = base + '/reboot'

            var xhr = new XMLHttpRequest();

            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-type", "text/plain");

            xhr.send();

        }


        function ResetWIFI() {

            if(confirm("Are you sure you wish to reset wifi?")==false)
                return

            let url = base + '/resetWIFI'

            var xhr = new XMLHttpRequest();

            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-type", "text/plain");

            xhr.send();

        }


        function OTAupdate() {

            // clear
            // otaDetails
            document.getElementById('otaDetails').hidden = true;
            document.getElementById('otaUpdating').hidden = false;
            document.getElementById('otaUpdating').innerText = "Trying update ..."

            var jsonData = {};

            // get all inputs
            var inputs = document.getElementsByTagName('input')
            var inputValid = true;
            for (index = 0; index < inputs.length; ++index) {


                if (inputs[index].id != '') {

                    if (inputs[index].value == '')
                        inputValid = false;

                    jsonData[inputs[index].id] = inputs[index].value;
                }
            }
            if (inputValid == true) {

                let url = base + '/json/upgrade'

                var xhr = new XMLHttpRequest();

                xhr.open("POST", url, true);
                xhr.setRequestHeader("Content-type", "text/plain");


                // then wait on a response
                xhr.onloadend = function () {
                    // done
                    // parse it
                    var jsonResponse = JSON.parse(xhr.responseText);
                    // HTTP_UPDATE_OK
                    if (jsonResponse['result'] != 2) {
                        alert(jsonResponse['Details']['espNarrative'])
                    }
                    else {
                        // reload the whole site?
                        window.location.reload(true)
                    }
                };

                xhr.send(JSON.stringify(jsonData));

            }
            else
                alert('values cannot be empty')
        }


    </script>

</BODY>

</HTML>