<HTML>
<HEAD>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<TITLE></TITLE>
    <link rel="stylesheet" type="text/css" href="switch.css">
</HEAD>
<BODY onload="OnLoad()">

    <div id="statusbar" hidden>
        <fieldset>
            <div id="statustext"></div>
        </fieldset>
    </div>
    

    <div class="verticalContainer">
        <fieldset>
            <legend>Options</legend>
                <div class="horizontalContainer">
                    <div>Reboot the device</div>
                    <div><button onclick="Reboot()">Reboot</button></div>
                </div>
                <div class="horizontalContainer">
                    <div>Reset WIFI</div>
                    <div><button onclick="ResetWIFI()">Reset</button></div>
                </div>
        </fieldset>
        <br hidden>
        <fieldset hidden>
            <legend>Upgrade</legend>
            <div class="horizontalContainer">
                <div>url</div>
                <div><input type="text" id="host"></div>
            </div>
            <div>
                <div class="horizontalContainerRight"><button onclick="OTAupdate()">Commit</button></div>
            </div>
        </fieldset>
        <br>
        <fieldset>
            <legend>Peers</legend>
            <div class="verticalContainer" id="peers"></div>
            <div class="horizontalContainerRight"><button onclick="fetchPeers()">Rescan</button></div>
        </fieldset>


    </div>

   

    <script src="common.js"></script>

    <script>

        function OnLoad() {
            fetchPeers();
        }

        function fetchPeers()
        {
            showStatus("Fetching Peers")

            let url = base + '/json/peers'
            var numPages = 0;
            fetch(url)
                .then(function (response) { return response.json(); })
                .then(function (data) {
                    // populate the peers
                    var peers = document.getElementById('peers')
                    // clear the list
                    peers.innerHTML = ""
                    if (data["peerCount"] > 0)
                    {
                        var peerArray = data["peers"]

                        for (var eachNode in peerArray)
                        {
                            // we should find out if it's html version beats ours
                            // todo
                            var row=document.createElement("div")
                            row.className="horizontalContainer"
                            var opt1 = document.createElement("div")
                            var opt2 = document.createElement("div")
                            //opt.setAttribute("value", peerArray[eachNode]["host"])
                            opt1.innerText = peerArray[eachNode]["name"];
                            var anchor=document.createElement("a")
                            anchor.innerText=peerArray[eachNode]["ip"];
                            anchor.href="http://"+peerArray[eachNode]["ip"];
                            anchor.target="_blank"
                            opt2.appendChild(anchor)
                            row.appendChild(opt1)
                            row.appendChild(opt2)
                            peers.appendChild(row);
                        }

                    }

                    clearStatus();
                    //document.getElementById('rescanPeers').hidden = false;
                    //document.getElementById('scanning').innerText = "";

                })            

        }

        function Reboot() {

            let url = base + '/reboot'

            var xhr = new XMLHttpRequest();

            xhr.open("GET", url, true);
            xhr.setRequestHeader("Content-type", "text/plain");

            xhr.send();

            }


        function ResetWIFI() {

            let url = base + '/resetWIFI'

            var xhr = new XMLHttpRequest();

            xhr.open("GET", url, true);
            xhr.setRequestHeader("Content-type", "text/plain");

            xhr.send();

        }


        function OTAupdate() {

            // clear
            // otaDetails
            document.getElementById('otaDetails').hidden = true;
            document.getElementById('otaUpdating').hidden = false;
            document.getElementById('otaUpdating').innerText="Trying update ..."

            var jsonData = {};

            // get all inputs
            var inputs = document.getElementsByTagName('input')
            var inputValid = true;
            for (index = 0; index < inputs.length; ++index) {


                if (inputs[index].id != '') {

                    if (inputs[index].value == '')
                        inputValid = false;

                    jsonData[inputs[index].id] = inputs[index].value;
                }
            }
            if (inputValid == true) {

                let url = base + '/json/upgrade'

                var xhr = new XMLHttpRequest();

                xhr.open("POST", url, true);
                xhr.setRequestHeader("Content-type", "text/plain");


                // then wait on a response
                xhr.onloadend = function () {
                    // done
                    // parse it
                    var jsonResponse = JSON.parse(xhr.responseText);
                    // HTTP_UPDATE_OK
                    if (jsonResponse['result'] != 2)
                     {
                        alert(jsonResponse['Details']['espNarrative'])
                    }
                    else {
                        // reload the whole site?
                        window.location.reload(true)
                    }
                };

                xhr.send(JSON.stringify(jsonData));

            }
            else
                alert('values cannot be empty')
        }




    </script>

</BODY>
</HTML>
